# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-07-17 15:44
from __future__ import unicode_literals

import authwrapper.phone.fields
import authwrapper.phone.models
import authwrapper.phone.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[authwrapper.phone.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('phone', authwrapper.phone.fields.PhoneNumberNullField(blank=True, error_messages={'unique': 'A user with that phone number already exists.'}, max_length=30, null=True, unique=True, verbose_name='phone')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', authwrapper.phone.fields.EmailNullField(blank=True, max_length=255, null=True, unique=True, verbose_name='email address')),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], default='male', max_length=30, verbose_name='sex')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birthday')),
                ('nickname', models.CharField(blank=True, max_length=30, verbose_name='nickname')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account_type', models.CharField(blank=True, choices=[('username', 'username'), ('mail', 'mail'), ('phone', 'phone')], default='username', max_length=50, null=True, verbose_name='account type')),
                ('user_role', models.CharField(choices=[('admin', 'administrator'), ('staff', 'staff'), ('guest', 'guest')], default='guest', max_length=50, verbose_name='user role')),
                ('image', models.ImageField(blank=True, null=True, upload_to=authwrapper.phone.models.image_upload_to, verbose_name='image')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'swappable': 'AUTH_USER_MODEL',
                'permissions': (('access_remote', 'access remote'),),
            },
            managers=[
                ('objects', authwrapper.phone.models.MyUserManager()),
            ],
        ),
    ]
